<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apos.Gui</name>
    </assembly>
    <members>
        <member name="T:Apos.Gui.Component">
            <summary>
            An empty component that doesn't really do anything.
            Used as a base class for other components.
            </summary>
        </member>
        <member name="M:Apos.Gui.Component.GetPrev">
            <summary>
            If this component has a parent, it will ask the parent to return this component's previous neighbor.
            Otherwise, it will return itself.
            </summary>
        </member>
        <member name="M:Apos.Gui.Component.GetNext">
            <summary>
            If this component has a parent, it will ask the parent to return this component's next neighbor.
            Otherwise, it will return itself.
            </summary>
        </member>
        <member name="T:Apos.Gui.GridPanel">
            <summary>
            Panel Object that puts Components next to each other.
            </summary>
        </member>
        <member name="F:Apos.Gui.GridPanel._Color">
            <summary>
            To set the background color of the grid, Can be null.
            </summary>
        </member>
        <member name="F:Apos.Gui.GridPanel._ComponentsInWidth">
            <summary>
            The amount of components that should be put next to each other.
            </summary>
        </member>
        <member name="F:Apos.Gui.GridPanel._nextChildIndex">
            <summary>
            Indexer for the next child in the _Children list.
            </summary>
        </member>
        <member name="F:Apos.Gui.GridPanel._Children">
            <summary>
            List of child components in this parent Panel.
            </summary>
        </member>
        <member name="P:Apos.Gui.GridPanel.Panel">
            <summary>
            The Panel in form of float type Ractangle.
            </summary>
        </member>
        <member name="P:Apos.Gui.GridPanel.OffsetXY">
            <summary>
            Helper to set both the X and Y relative to the Parent.
            </summary>
        </member>
        <member name="P:Apos.Gui.GridPanel.FullSize">
            <summary>
            Helper to set the width and height of the Panel.
            </summary>
        </member>
        <member name="M:Apos.Gui.GridPanel.#ctor(System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            Initialize the Panel.
            </summary>
            <param name="id"></param>
            /// <param name="color"></param>
            <param name="componentsInWidth"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.UpdatePrefSize(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the Preffered width and Height of the GridPanel based on the sizes of the children.
            Should run every frame.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.UpdateSetup(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Set all the components positions based on the parent position.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.UpdateInput(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.GetNext(Apos.Gui.IComponent)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Apos.Gui.GridPanel.GetPrev(Apos.Gui.IComponent)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Apos.Gui.GridPanel.Add(Apos.Gui.IComponent)">
            <summary>
            Add the component to this parent Panel.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.Remove(Apos.Gui.IComponent)">
            <summary>
            Remove the component child from this parent.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.Reset">
            <summary>
            Reset the child index back to 0.
            </summary>
        </member>
        <member name="M:Apos.Gui.GridPanel.NextIndex">
            <summary>
            Helper to get the next index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.GridPanel.Pop">
            <summary>
            Since first in last out this pops the last one in the ImGUI.
            </summary>
        </member>
        <member name="M:Apos.Gui.GridPanel.Push(System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Boolean)">
            <summary>
            Check if GridPanel exists. create or get it. Ping it and push it to the GUI.
            </summary>
            /// <param name="size"></param>
            <param name="id"></param>
            <param name="isAbsoluteId"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.GridPanel.PingIfNotDoneThisFrame(Apos.Gui.GridPanel)">
            <summary>
            Not sure why we do this yet. but hey. Panel obj does it. c:
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.SendToTop(Apos.Gui.IComponent)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Apos.Gui.GridPanel.SetEachComponent(System.Single[],Microsoft.Xna.Framework.GameTime)">
            <summary>
            Set the size and position of every component.
            </summary>
            <param name="colWidths"></param>
            <param name="gameTime"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.SetPanelWidthHeightBasedOnChildrenRowsAndColumns(System.Single[],System.Single@,System.Single@)">
            <summary>
            The width and height of the Panel is based on the biggest height
            of each row and biggest width of each column.
            And we get the sum of that.
            </summary>
            <param name="colWidths"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
        </member>
        <member name="M:Apos.Gui.GridPanel.ChangePosYBasedOnPreviousRowHeights(System.Single,System.Int32,System.Int32)">
            <summary>
            Basicly get the sum of all previous rows to know the next starting Pos.
            </summary>
            <param name="posY"></param>
            <param name="i"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.GridPanel.GetBiggestColumnSize">
            <summary>
            Get the size of each column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.GridPanel.GetRowSizes">
            <summary>
            Get the size of each Row
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apos.Gui.MarginalPanel">
            <summary>
            To set a margin around the children.
            </summary>
        </member>
        <member name="F:Apos.Gui.MarginalPanel._nextChildIndex">
            <summary>
            The next child indexer.
            </summary>
        </member>
        <member name="F:Apos.Gui.MarginalPanel._children">
            <summary>
            Children of component
            </summary>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            To set the id to the base component.
            </summary>
            <param name="id"></param>
            <param name="t"></param>
            <param name="s"></param>
            <param name="l"></param>
            <param name="r"></param>
            <param name="c"></param>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.Add(Apos.Gui.IComponent)">
            <summary>
            Add the child to the component.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.GetNext(Apos.Gui.IComponent)">
            <summary>
            Get next child.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.GetPrev(Apos.Gui.IComponent)">
            <summary>
             Get previous child.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.Push(Microsoft.Xna.Framework.Vector4,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Boolean)">
            <summary>
            Push a new Margin to the Queue.
            </summary>
            <param name="id"></param>
            <param name="isAbsoluteId"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.Push(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Boolean)">
            <summary>
            Push a new Margin to the Queue.
            </summary>
            <param name="id"></param>
            <param name="isAbsoluteId"></param>
            <returns></returns>
        </member>
        <member name="M:Apos.Gui.MarginalPanel.Pop">
            <summary>
            Pop Margin from the queue.
            </summary>
        </member>
        <member name="M:Apos.Gui.Panel.GetPrev">
            <summary>
            If this component has a parent, it will ask the parent to return this component's previous neighbor.
            If it has children, it will return the last one.
            Otherwise it will return itself.
            </summary>
        </member>
        <member name="M:Apos.Gui.Panel.GetNext">
            <summary>
            If this component has children, it will return the first one.
            If it has a parent it will ask the parent to return this component's next neighbor.
            Otherwise, it will return itself.
            </summary>
        </member>
        <member name="M:Apos.Gui.Panel.GetPrev(Apos.Gui.IComponent)">
            <summary>
            If the child isn't the first one, it will return the child before it.
            Otherwise it will return itself.
            </summary>
        </member>
        <member name="M:Apos.Gui.Panel.GetNext(Apos.Gui.IComponent)">
            <summary>
            If the child isn't the last one, it will return the child after it.
            If it has a parent, it will ask the parent to return this component's next neighbor.
            Otherwise it will return itself.
            </summary>
        </member>
        <member name="M:Apos.Gui.Panel.GetLast">
            <summary>
            Returns the last child in this component tree.
            </summary>
        </member>
        <member name="M:Apos.Gui.Scaler.Add(Apos.Gui.IComponent)">
            <summary>
            Add a new child to this component.
            </summary>
            <param name="c"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Apos.Gui.Scaler.Remove(Apos.Gui.IComponent)">
            <summary>
            Remove a child from this component.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Apos.Gui.Scaler.Push(System.Int32,System.Boolean)">
            <summary>
            Create a new Scaler and add it to IMGUI
            </summary>
            <param name="id"></param>
            <param name="isAbsoluteId"></param>
            <returns></returns>
        </member>
        <member name="T:Apos.Gui.GuiHelper">
            <summary>
            Unorganized helper functions for Apos.Gui.
            </summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.Setup(Microsoft.Xna.Framework.Game,FontStashSharp.FontSystem)">
            <summary>
            Usually called once in a game's LoadContent.
            </summary>
            <param name="game">Game instance.</param>
            <param name="fontSystem">The font system to use for the UI.</param>
        </member>
        <member name="M:Apos.Gui.GuiHelper.UpdateSetup">
            <summary>
            Called at the start of an update loop.
            </summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.UpdateCleanup">
            <summary>
            Called at the end of an update loop.
            </summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.CurrentIMGUI">
            <summary>
            Currently selected IMGUI. This is the IMGUI to use when adding components.
            </summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.Scale">
            <value>The scale of the UI. Defaults to 1f.</value>
        </member>
        <member name="P:Apos.Gui.GuiHelper.UIMatrix">
            <summary>
            Used to convert between the screen and UI coordinate system.
            </summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.Mouse">
             <summary>
            
             </summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.SpriteBatch">
            <summary>SpriteBatch used to draw the UI.</summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.FontSystem">
            <summary>FontSystem used in the UI.</summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.GuiSampler">
            <summary>Defaults to LinearClamp.</summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.GetFont(System.Int32)">
            <summary>Returns a font with a given size.</summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.MeasureStringTight(System.String,System.Int32)">
            <summary>Measures text using a font with a given size. The size is as tight as possible to the text.</summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.MeasureString(System.String,System.Int32)">
            <summary>Measures text using a font with a given size. The line height is the same no matter the text content.</summary>
        </member>
        <member name="P:Apos.Gui.GuiHelper.FontScale">
            <summary>Used when drawing text to the screen. The text has to be scaled by this value.</summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.SetScissor(MonoGame.Extended.RectangleF)">
            <summary>
            Uses a rectangle to limit the area that the spritebatch is allowed to draw to.
            The rectangle is converted into screen coordinates.
            </summary>
            <param name="r">The rectangle to use for the spritebatch scissor in UI coordinates.</param>
        </member>
        <member name="M:Apos.Gui.GuiHelper.ResetScissor">
            <summary>
            Uses a rectangle to limit the area that the spritebatch is allowed to draw to.
            </summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.Begin">
            <summary>
            Calls begin on the spritebatch with the UI rasterizer state, transform matrix and sampler state.
            </summary>
        </member>
        <member name="M:Apos.Gui.GuiHelper.End">
            <summary>
            Calls end on the spritebatch.
            </summary>
        </member>
        <member name="M:Apos.Gui.IMGUI.UpdatePrefSize(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Only call this if you didn't call UpdateAll. This should be called at the start of your update loop.
            </summary>
        </member>
        <member name="M:Apos.Gui.IMGUI.UpdateSetup(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Only call this if you didn't call UpdateAll. This should be called after UpdatePrefSize.
            </summary>
        </member>
        <member name="M:Apos.Gui.IMGUI.UpdateInput(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Only call this if you didn't call UpdateAll. This should be called after UpdateSetup.
            </summary>
            <param name="gameTime">Current gametime.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Only call this if you didn't call UpdateAll. This should be called after UpdateInput.
            </summary>
            <param name="gameTime">Current gametime</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.UpdateAll(Microsoft.Xna.Framework.GameTime,System.Boolean)">
            <summary>
            Call this at the start of your update loop.
            It calls UpdateSetup, UpdateInput, and Update.
            </summary>
            <param name="gameTime">Current gametime.</param>
            <param name="callUpdateInput">false will skip UpdateInput.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws all components in the UI.
            </summary>
            <param name="gameTime">Current gametime.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.Push(Apos.Gui.IParent,System.Int32)">
            <summary>
            Inserts a parent at the top of the parent stack.
            </summary>
            <param name="p">The parent to insert.</param>
            <param name="maxChildren">The parent's max amount of children, 0 means infinite.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.Pop">
            <summary>
            Removes a parent from the top of the parent stack.
            </summary>
        </member>
        <member name="M:Apos.Gui.IMGUI.PushId(System.Int32)">
            <summary>
            Inserts an id at the top of the id stack.
            </summary>
            <param name="id">The id to push onto the id stack.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.PopId">
            <summary>
            Removes an id from the top of the id stack.
            </summary>
        </member>
        <member name="M:Apos.Gui.IMGUI.TryGetValue(System.Int32,Apos.Gui.IComponent@)">
            <summary>
            Tries to get the component with the given id if it exists.
            </summary>
            <param name="id">The id of the component to get.</param>
            <param name="c">When this method returns, contains the component associated with the specified id.</param>
            <returns>true if the component with the specified id is found; otherwise false.</returns>
        </member>
        <member name="M:Apos.Gui.IMGUI.GrabParent(Apos.Gui.IComponent)">
            <summary>
            Returns the current top parent. Used for parenting a child component to a parent.
            If a child already has a parent, it will be marked for a parent change.
            </summary>
            <param name="c">The child that will be parented.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.GrabFocus(Apos.Gui.IComponent)">
            <summary>
            Gives focus to a component. Can also clear the focus if null is passed.
            </summary>
            <param name="c">The component that should receive focus.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.CreateId(System.Int32,System.Boolean)">
            <summary>
            Guaranteed to return a unique id during the span of the current frame.
            </summary>
            <param name="id">An id that should be part of the generation process.</param>
            <param name="isAbsoluteId">Whether to use the current parent for the id generation.</param>
        </member>
        <member name="M:Apos.Gui.IMGUI.QueueNextTick(System.Action)">
            <summary>
            Used when an action would invalidate the layout which would lead to an invalid draw (flicker).
            Using this, you can delay the action until the next UpdateSetup.
            </summary>
            <param name="a">The action that will be enqueued.</param>
        </member>
    </members>
</doc>
